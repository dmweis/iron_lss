var searchIndex = JSON.parse('{\
"lss_driver":{"doc":"Lynxmotion Smart Servo Driver","t":[13,13,13,17,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,4,4,13,13,4,13,4,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12],"n":["Accelerating","Accelerating","AlwaysBlink","BROADCAST_ID","Blocked","Blue","CommandModifier","CurrentHold","CurrentLimit","CurrentLimp","Custom","Cyan","Decelerating","Decelerating","FailedOpeningSerialPort","Free","FreeMoving","Green","HS1","HT1","Holding","Holding","InputVoltageOutOfRange","LSSDriver","LedBlinking","LedColor","Limp","Limp","LssDriverError","Magenta","Model","MotorStatus","NoBlinking","NoLimits","None","Off","Other","OutsideLimits","PacketParsingError","Red","ST1","SafeMode","SafeModeStatus","SendingError","Speed","SpeedDegrees","Stuck","TemperatureLimit","Timed","TimedDuration","TimeoutError","Traveling","Travelling","Unknown","White","Yellow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","configure_color","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","halt_hold","into","into","into","into","into","into","into","into","limp","move_to_position","move_to_position_with_modifier","move_to_position_with_modifiers","move_to_pwm_position","move_to_pwm_position_with_modifier","move_to_pwm_position_with_modifiers","ne","ne","new","query_angular_acceleration","query_angular_deceleration","query_angular_holding_stiffness","query_angular_range","query_angular_stiffness","query_color","query_current","query_filter_position_count","query_firmware_version","query_id","query_maximum_motor_duty","query_maximum_speed","query_model","query_motion_profile","query_origin_offset","query_position","query_pwm_position","query_rotation_speed","query_safety_status","query_serial_number","query_status","query_target_position","query_temperature","query_voltage","reset","set_angular_acceleration","set_angular_deceleration","set_angular_holding_stiffness","set_angular_range","set_angular_stiffness","set_color","set_filter_position_count","set_id","set_led_blinking","set_maximum_motor_duty","set_maximum_speed","set_motion_profile","set_origin_offset","set_rotation_speed","set_rotation_speed_with_modifier","set_target_position","to_msg","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vec_to_msg","with_baud_rate","with_driver","0","0","0","0","0","0","0","1","0","0"],"q":["lss_driverlss_driver::CommandModifier","","","","","","","","lss_driver::LssDriverError","lss_driver::Model"],"d":["","","","ID used to talk to all motors on a bus at once","","","Modifiers used for some commands","Useful with (D; MD; WD; WR) in mA wiki","This probably means that motor was overloaded","Useful with (D; MD; WD; WR.) in mA wiki","Useful in case there is a new modifier that is not …","","","","","","","","High speed model","High torque model","","","Voltage is either too high or too low. Query voltage to …","Driver for the LSS servo","Which status should trigger LED blinking Can be combined …","Colors for the LED on the servo","","","Driver errors","","Version of the motor","Status of the motor as responded to status query If status …","","Motor is not in safety mode","Special modifier that allows you to use modifiable …","No color","Other model. Shouldn’t happen unless new motors were …","","Error triggered if we fail parsing incoming packet into a …","","Standard model","You can use <code>query_safety_status</code> to see more details","Reason why status mode is engaged if <code>query_status</code> doesn’…","","only for P commands microseconds per second wiki","Only for D or MD commands degrees per second wiki","","You can query temperature to see if it’s high","Useful for (P, D, MD) actions in milliseconds wiki","Useful for (P, D, MD) actions wiki","Error triggered for reading timeout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","configure color for motor with id (value will be saved)","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Stops any ongoing motor motion and actively holds position","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Disables power to motor allowing it to be back driven","Move to absolute position in degrees","Move to absolute position in degrees with modifier","Move to absolute position in degrees with multiple …","Move to PWM position in µs.","Move to PWM position in µs with modifier.","Move to PWM position in µs with modifiers.","","","Create new driver on a serial port with default settings","Query angular acceleration in degrees per second squared …","Query angular deceleration in degrees per second squared …","Query angular holding stiffness","Query the angular range in degrees","Query angular stiffness","Query color of servo LED","Query current of motor in Amps","Query filter position count","Query firmware version","Query value of ID Especially useful with BROADCAST_ID","Query maximum motor duty","Query maximum speed in degrees per second","Query model string","query motion profile enabled or disabled. If the motion …","Query origin offset in degrees","Query absolute current position in degrees","Queries the position in µs.","Query absolute rotation speed in °/s","Query safety status of a motor","Query serial number","Query status of a motor","Query absolute target position in degrees","Query temperature of motor in celsius","Query voltage of motor in volts","Soft reset This command does a “soft reset” and …","Set angular acceleration in degrees per second squared …","Set angular deceleration in degrees per second squared …","Set angular holding stiffness","Set the angular range in degrees","Set angular stiffness","set color for driver with id","Set filter position count","Set value of ID Saved to EEPROM Only takes effect after …","Set LED blinking mode","Set maximum motor duty","Set maximum speed in degrees per second","Set motion profile enabled or disabled. If the motion …","Set origin offset in degrees","Set continuous rotation speed in °/s","Set continuous rotation speed in °/s with modifier","Move to absolute position in degrees","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create new driver on a serial port with custom baud rate","Creates new LSS driver with a custom implementation of the …","","","","","","","","","",""],"i":[1,2,2,0,1,3,0,4,5,4,4,3,1,2,6,2,1,3,7,7,1,2,5,0,0,0,1,2,0,3,0,0,2,5,4,3,7,1,6,3,7,1,0,6,4,4,1,5,4,4,6,1,2,1,3,3,8,6,3,1,5,7,2,4,8,6,3,1,5,7,2,4,3,1,5,7,2,4,3,1,5,7,2,4,8,3,1,5,7,2,4,6,6,3,1,5,7,2,4,8,6,3,1,5,7,2,4,8,8,6,3,1,5,7,2,4,8,8,8,8,8,8,8,7,4,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,4,3,1,5,7,2,4,6,8,6,3,1,5,7,2,4,8,6,3,1,5,7,2,4,8,6,3,1,5,7,2,4,4,8,8,9,10,11,12,13,14,15,15,16,17],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["ledcolor",4]],["ledcolor",4]],[[["motorstatus",4]],["motorstatus",4]],[[["safemodestatus",4]],["safemodestatus",4]],[[["model",4]],["model",4]],[[["ledblinking",4]],["ledblinking",4]],[[["commandmodifier",4]],["commandmodifier",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["lssdriver",3],["u8",0],["ledcolor",4]],["future",8]],[[["ledcolor",4],["ledcolor",4]],["bool",0]],[[["motorstatus",4],["motorstatus",4]],["bool",0]],[[["safemodestatus",4],["safemodestatus",4]],["bool",0]],[[["model",4],["model",4]],["bool",0]],[[["ledblinking",4],["ledblinking",4]],["bool",0]],[[["commandmodifier",4],["commandmodifier",4]],["bool",0]],[[["lssdrivererror",4],["formatter",3]],["result",6]],[[["lssdrivererror",4],["formatter",3]],["result",6]],[[["ledcolor",4],["formatter",3]],["result",6]],[[["motorstatus",4],["formatter",3]],["result",6]],[[["safemodestatus",4],["formatter",3]],["result",6]],[[["model",4],["formatter",3]],["result",6]],[[["ledblinking",4],["formatter",3]],["result",6]],[[["commandmodifier",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lssdriver",3],["u8",0]],["future",8]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0],["f32",0]],["future",8]],[[["lssdriver",3],["u8",0],["f32",0],["commandmodifier",4]],["future",8]],[[["lssdriver",3],["u8",0],["f32",0]],["future",8]],[[["lssdriver",3],["u8",0],["i32",0]],["future",8]],[[["lssdriver",3],["u8",0],["i32",0],["commandmodifier",4]],["future",8]],[[["lssdriver",3],["u8",0],["i32",0]],["future",8]],[[["model",4],["model",4]],["bool",0]],[[["commandmodifier",4],["commandmodifier",4]],["bool",0]],[[["str",0]],["result",4,[["lssdriver",3],["lssdrivererror",4]]]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0],["i32",0]],["future",8]],[[["lssdriver",3],["u8",0],["i32",0]],["future",8]],[[["lssdriver",3],["u8",0],["i32",0]],["future",8]],[[["lssdriver",3],["u8",0],["f32",0]],["future",8]],[[["lssdriver",3],["u8",0],["i32",0]],["future",8]],[[["lssdriver",3],["u8",0],["ledcolor",4]],["future",8]],[[["lssdriver",3],["u8",0],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0],["u8",0]],["future",8]],[[["lssdriver",3],["u8",0],["vec",3,[["ledblinking",4]]]],["future",8]],[[["lssdriver",3],["u8",0],["i32",0]],["future",8]],[[["lssdriver",3],["u8",0],["f32",0]],["future",8]],[[["lssdriver",3],["u8",0],["bool",0]],["future",8]],[[["lssdriver",3],["u8",0],["f32",0]],["future",8]],[[["lssdriver",3],["u8",0],["f32",0]],["future",8]],[[["lssdriver",3],["u8",0],["f32",0],["commandmodifier",4]],["future",8]],[[["lssdriver",3],["u8",0],["f32",0]],["future",8]],[[["commandmodifier",4]],["string",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["string",3]],[[["str",0],["u32",0]],["result",4,[["lssdriver",3],["lssdrivererror",4]]]],[[["box",3,[["frameddriver",8]]]],["lssdriver",3]],null,null,null,null,null,null,null,null,null,null],"p":[[4,"MotorStatus"],[4,"LedBlinking"],[4,"LedColor"],[4,"CommandModifier"],[4,"SafeModeStatus"],[4,"LssDriverError"],[4,"Model"],[3,"LSSDriver"],[13,"Speed"],[13,"SpeedDegrees"],[13,"Timed"],[13,"TimedDuration"],[13,"CurrentHold"],[13,"CurrentLimp"],[13,"Custom"],[13,"PacketParsingError"],[13,"Other"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
